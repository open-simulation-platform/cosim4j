import org.gradle.internal.jvm.Jvm
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'cpp-library'
}

def os = OperatingSystem.current()
def conanBuildInfo = new File(buildDir, "conanbuildinfo.txt");

ext.collectDependency = { String type ->

    if (conanBuildInfo.exists()) {
        def collect = []
        conanBuildInfo.withReader { reader ->
            def line
            def read = false
            while ((line = reader.readLine()) != null) {
                if (line.contains("[${type}dirs]")) {
                    read = true
                } else if (read) {
                    if (line.isEmpty()) {
                        break
                    }
                    collect += line
                }
            }
        }

        return collect
    }

}

ext.findPath = { String... names ->

    def includeDirs = collectDependency("include").collect { new File(it) }
    for (File includeDir : includeDirs) {

        for (String fileName : includeDir.list()) {
            for (String nameToFind : names) {
                if (fileName == nameToFind) {
                    return includeDir.absolutePath
                }
            }
        }

    }
    return null

}

ext.findLibrary = { String... names ->

    def libDirs = collectDependency("lib").collect { new File(it) }
    for (File includeDirs : libDirs) {

        for (File file : includeDirs.listFiles()) {
            for (String nameToFind : names) {
                if (file.getName() == os.getLinkLibraryName(nameToFind)) {
                    return file.getAbsolutePath()
                }
            }
        }

    }
    return null

}

task runConan {

    if (!conanBuildInfo.exists()) {

        def cmd1 = "conan remote add osp https://osp-conan.azurewebsites.net/artifactory/api/conan/conan-local --f"
        def cmd2 = "conan user -p 'Open Simulation Platform' -r osp osp".split(" ")

        if (os.isWindows()) {
            cmd1 = ("cmd /c" + cmd1).split(" ")
            exec {
                commandLine cmd1
                commandLine cmd2
                commandLine "conan install . -s build_type=Release --install-folder=build --build=missing".split(" ")
            }
        } else if (os.isLinux()) {
            exec {
                commandLine "conan install . -s build_type=Release -s compiler.libcxx=libstdc++11 --install-folder=build --build=missing".split(" ")
//                commandLine "execstack", "-c", findLibrary("csecorec")
//                commandLine "execstack", "-c", findLibrary("csecorecpp")
            }
        } else {
            throw GradleException("OS $os not supported!");
        }

    }

}

task forceRunConan {
    doLast {
        conanBuildInfo.delete()
    }
    finalizedBy runConan
}

library { CppLibrary lib ->

    baseName.set("csecorejni")

    targetMachines = [
            machines.windows.x86_64,
            machines.linux.x86_64,
    ]

    lib.binaries.configureEach {
        if (os.isLinux()) {
            compileTask.get().compilerArgs = ["-std=c++17"]
        } else if (os.isWindows()) {
            compileTask.get().compilerArgs = ["-std:c++17"]
        }
    }

    def javaHome = Jvm.current().javaHome

    lib.binaries.whenElementFinalized { CppBinary binary ->

        project.dependencies {

            def libcsecorec = findLibrary("csecorec")
            def libcsecorecpp = findLibrary("csecorecpp")
            add(binary.linkLibraries.name, files(libcsecorecpp, libcsecorec))

            def cseIncludeDir = findPath("cse.h")
            add(binary.includePathConfiguration.name, files("$javaHome/include", cseIncludeDir))

            if (os.isLinux()) {
                add(binary.includePathConfiguration.name, files("$javaHome/include/linux"))
            } else if (os.isWindows()) {
                add(binary.includePathConfiguration.name, files("$javaHome/include/win32"))
            }

        }

    }

}

def assembleAllRelease = []

tasks.all {
    if (it.name.contains("assembleRelease")) {
        assembleAllRelease.add(it)
    }
    if (it.name.contains("compileRelease")) {
        it.dependsOn runConan
    }
}

tasks.register("assembleAllRelease")

task copyNativeLibs(type: Copy, dependsOn: assembleAllRelease) {

    into "$rootDir/core/src/main/resources/native/${os.isLinux() ? "linux" : "win64"}"

    if (os.isLinux()) {

        from "$buildDir/lib/main/release/linux"
        include "*.so"

    } else if (os.isWindows()) {

        from "$buildDir/lib/main/release/windows"
        include "*.dll"

    } else {
        throw Exception("Unsupported OS: " + OperatingSystem.current().name)
    }

}
