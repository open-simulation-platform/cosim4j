import org.gradle.internal.jvm.Jvm
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'cpp-library'
}

def os =  OperatingSystem.current()

task runConan {

    doLast {

        if (!new File(buildDir, "conanbuildinfo.txt").exists()) {

            def cmd1 = "conan remote add osp https://osp-conan.azurewebsites.net/artifactory/api/conan/conan-local --f"
            def cmd2 = "conan user -p 'Open Simulation Platform' -r osp osp".split(" ")

            if (os.isWindows()) {
                cmd1 = ("cmd /c" + cmd1).split(" ")
                exec {
                    commandLine cmd1
                    commandLine cmd2
                    commandLine "conan install . -s build_type=Release --install-folder=build --build=missing".split(" ")
                }
            } else if (os.isLinux()) {
                exec {
                    commandLine "conan install . -s build_type=Release -s compiler.libcxx=libstdc++11 --install-folder=build --build=missing".split(" ")
                }
            } else {
                throw GradleException("OS $os not supported!");
            }

        }

    }

}

task forceRunConan {
    new File(buildDir, "conanbuildinfo.txt").delete()
    finalizedBy runConan
}


def isLinux = os.isLinux()
def platform = isLinux ? "linux" : "win64"
def cseLibDir = isLinux ? "${rootDir}/core/src/main/resources/native/${platform}" : "${rootDir}/native/lib/${platform}"

library { CppLibrary lib ->

    baseName = "csecorejni"

    targetMachines = [
            machines.windows.x86_64,
            machines.linux.x86_64,
    ]

    lib.binaries.whenElementFinalized { CppBinary binary ->

        def javaHome = Jvm.current().javaHome
        def libcsecorec = file(OperatingSystem.current().getLinkLibraryName("${cseLibDir}/csecorec"))
        def libcsecorecpp = file(OperatingSystem.current().getLinkLibraryName("${cseLibDir}/csecorecpp"))
        
        project.dependencies {
            
            add(binary.linkLibraries.name, files(libcsecorecpp, libcsecorec))
            add(binary.includePathConfiguration.name, files("$javaHome/include"))
            
            if (OperatingSystem.current().isLinux()) {
                add(binary.includePathConfiguration.name, files("$javaHome/include/linux"))
            } else if (OperatingSystem.current().isWindows()) {
                add(binary.includePathConfiguration.name, files("$javaHome/include/win32"))
            }

        }

    }

}

def assembleAllRelease = []

tasks.all {
    if (it.name.contains("assembleRelease")) {
        assembleAllRelease.add(it)
    }
}

tasks.register("assembleAllRelease") {
    dependsOn runConan
}

task copyNativeLibs(type: Copy, dependsOn: assembleAllRelease) {

    into "$rootDir/core/src/main/resources/native/${platform}"

    if (OperatingSystem.current().isLinux()) {

            from "$buildDir/lib/main/release/linux"
            include "*.so"

    } else if (OperatingSystem.current().isWindows()) {

            from "$buildDir/lib/main/release/windows"
            include "*.dll"

    } else {
        throw Exception("Unsupported OS: " + OperatingSystem.current().name)
    }

}
