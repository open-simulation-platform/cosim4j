import org.gradle.internal.jvm.Jvm
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'cpp-library'
}

def cseDir = "${rootDir}/build/cse"

library { CppLibrary lib ->

    baseName = "csecorejni"

    targetMachines = [
            machines.windows.x86_64,
            machines.linux.x86_64,
    ]

    lib.binaries.whenElementFinalized { CppBinary binary ->

        def javaHome = Jvm.current().javaHome
        def libcsecorec = file(OperatingSystem.current().getLinkLibraryName("${cseDir}/lib/csecorec"))
        def libcsecorecpp = file(OperatingSystem.current().getLinkLibraryName("${cseDir}/lib/csecorecpp"))
        
        project.dependencies {
            
            add(binary.linkLibraries.name, files(libcsecorecpp, libcsecorec))
            add(binary.includePathConfiguration.name, files(cseDir, "$javaHome/include"))
            
            if (OperatingSystem.current().isLinux()) {
                add(binary.includePathConfiguration.name, files("$javaHome/include/linux"))
            } else if (OperatingSystem.current().isWindows()) {
                add(binary.includePathConfiguration.name, files("$javaHome/include/win32"))
            }

        }

    }

}

def assembleAllRelease = []

tasks.all {
    if (it.name.contains("assembleRelease")) {
        assembleAllRelease.add(it)
    }
}

tasks.register("assembleAllRelease")

task copyNativeLibs(type: Copy, dependsOn: assembleAllRelease) {

    into "$rootDir/core/src/main/resources/native"

    if (OperatingSystem.current().isLinux()) {

            from "$buildDir/lib/main/release/linux"
            include "*.so"

    } else if (OperatingSystem.current().isWindows()) {

            from "$buildDir/lib/main/release/windows"
            include "*.dll"

    } else {
        throw Exception("Unsupported OS: " + OperatingSystem.current().name)
    }

}
