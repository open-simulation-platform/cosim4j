import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'cpp'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.11'
}

group 'org.osp'
version '0.1-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    
    def junit_version = '5.3.2'
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_version")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_version")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_version")
    
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

model {

    buildTypes {
        release
    }

    platforms {
        if (Os.isFamily(Os.FAMILY_UNIX)) {
            linux64 {
                architecture "x86_64"
                operatingSystem "linux"
            }
        } else  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            win64 {
                architecture "x86_64"
                operatingSystem "windows"
            }
        }
    }

    toolChains {
        visualCpp(VisualCpp) {}
        gcc(Gcc) {
            if (Os.isFamily(Os.FAMILY_UNIX)) {
                target("linux64")
            }  else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                target("win64")
            }
        }

    }

    repositories {
        libs(PrebuiltLibraries) {
            cse_corec {
                binaries.withType(SharedLibraryBinary) {
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        sharedLibraryFile = file(projectDir.getPath() + "/src/main/resources/native/cse/csecorec.dll")
                    } else {
                        sharedLibraryFile = file(projectDir.getPath() + "/src/main/resources/native/cse/libcsecorec.so")
                    }
                }
            }
            cse_corecpp {
                binaries.withType(SharedLibraryBinary) {
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        sharedLibraryFile = file(projectDir.getPath() + "/src/main/resources/native/cse/csecorecpp.dll")
                    } else {
                        sharedLibraryFile = file(projectDir.getPath() + "/src/main/resources/native/cse/libcsecorecpp.so")
                    }
                }
            }
        }
    }

    components {
        main(NativeLibrarySpec) {

            baseName = "csecore_jni"

            if (Os.isFamily(Os.FAMILY_UNIX)) {
                targetPlatform "linux64"
            } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                targetPlatform "win64"
            }

            sources {
                cpp.lib library: 'cse_corec', linkage: 'shared'
                cpp.lib library: 'cse_corecpp', linkage: 'shared'
            }
            
            binaries {

               all {
                   cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                   if (Os.isFamily(Os.FAMILY_UNIX)) {
                       cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                   } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                       cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                   }
               }

            }

        }

    }

    tasks {
        buildAllExecutables(Task) {
            dependsOn $.binaries.findAll { it.buildable }
        }
        copyNativeLibs(Copy) {
            from "$buildDir/libs/main/shared"
            include "**/*.lib", "**/*.so"
            into "$projectDir/src/main/resources/native/cse"
            dependsOn buildAllExecutables
        }
        assemble.dependsOn(copyNativeLibs)
    }
}

